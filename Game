// SpaceInvaders.c
// Runs on LM4F120/TM4C123
// Jonathan Valvano and Daniel Valvano
// This is a starter project for the EE319K Lab 10

// November 16, 2014
// http://www.spaceinvaders.de/
// sounds at http://www.classicgaming.cc/classics/spaceinvaders/sounds.php
// http://www.classicgaming.cc/classics/spaceinvaders/playguide.php
/* This example accompanies the books
   "Embedded Systems: Real Time Interfacing to Arm Cortex M Microcontrollers",
   ISBN: 978-1463590154, Jonathan Valvano, copyright (c) 2013

   "Embedded Systems: Introduction to Arm Cortex M Microcontrollers",
   ISBN: 978-1469998749, Jonathan Valvano, copyright (c) 2013

 Copyright 2014 by Jonathan W. Valvano, valvano@mail.utexas.edu
    You may use, edit, run or distribute this file
    as long as the above copyright notice remains
 THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL,
 OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 For more information about my classes, my research, and my books, see
 http://users.ece.utexas.edu/~valvano/
 */
// ******* Required Hardware I/O connections*******************
// Slide pot pin 1 connected to ground
// Slide pot pin 2 connected to PE2/AIN1
// Slide pot pin 3 connected to +3.3V 
// fire button connected to PE0
// special weapon fire button connected to PE1
// 8*R resistor DAC bit 0 on PB0 (least significant bit)
// 4*R resistor DAC bit 1 on PB1
// 2*R resistor DAC bit 2 on PB2
// 1*R resistor DAC bit 3 on PB3 (most significant bit)
// LED on PB4
// LED on PB5

// Blue Nokia 5110
// ---------------
// Signal        (Nokia 5110) LaunchPad pin
// Reset         (RST, pin 1) connected to PA7
// SSI0Fss       (CE,  pin 2) connected to PA3
// Data/Command  (DC,  pin 3) connected to PA6
// SSI0Tx        (Din, pin 4) connected to PA5
// SSI0Clk       (Clk, pin 5) connected to PA2
// 3.3V          (Vcc, pin 6) power
// back light    (BL,  pin 7) not connected, consists of 4 white LEDs which draw ~80mA total
// Ground        (Gnd, pin 8) ground

// Red SparkFun Nokia 5110 (LCD-10168)
// -----------------------------------
// Signal        (Nokia 5110) LaunchPad pin
// 3.3V          (VCC, pin 1) power
// Ground        (GND, pin 2) ground
// SSI0Fss       (SCE, pin 3) connected to PA3
// Reset         (RST, pin 4) connected to PA7
// Data/Command  (D/C, pin 5) connected to PA6
// SSI0Tx        (DN,  pin 6) connected to PA5
// SSI0Clk       (SCLK, pin 7) connected to PA2
// back light    (LED, pin 8) not connected, consists of 4 white LEDs which draw ~80mA total
#include <stdint.h>
#include "..//inc//tm4c123gh6pm.h"
#include "Nokia5110.h"
#include "Random.h"
#include "TExaS.h"
#include "ADC.h"
#include "Buttons.h" 
#include "SpaceInvaders.h"
#include "Sound.h" 

//void DisableInterrupts(void); // Disable interrupts
//void EnableInterrupts(void);  // Enable interrupts
//void Delay100ms(uint32_t count); // time delay in 0.1 seconds
//void Draw_2(uint32_t point); 
//void Init(void);
//void Move(void); 


// *************************** Images ***************************
// enemy ship that starts at the top of the screen (arms/mouth closed)
// width=16 x height=10
const uint8_t SmallEnemy30PointA[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
 0xFF, 0x0F, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts at the top of the screen (arms/mouth open)
// width=16 x height=10
const uint8_t SmallEnemy30PointB[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
 0x0F, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
 0xFF, 0x0F, 0xF0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts in the middle of the screen (arms together)
// width=16 x height=10
const uint8_t SmallEnemy20PointA[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x0F, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
 0xF0, 0x0F, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts in the middle of the screen (arms apart)
// width=16 x height=10
const uint8_t SmallEnemy20PointB[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0,
 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x0F, 0xF0, 0x0F, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
 0xF0, 0x0F, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts at the bottom of the screen (arms down)
// width=16 x height=10
const uint8_t SmallEnemy10PointA[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x0F, 0xF0, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0F,
 0xF0, 0xFF, 0xFF, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// enemy ship that starts at the bottom of the screen (arms up)
// width=16 x height=10
const uint8_t SmallEnemy10PointB[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF,
 0xF0, 0xFF, 0xFF, 0x0F, 0xFF, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// image of the player's ship
// includes two blacked out columns on the left and right sides of the image to prevent smearing when moved 2 pixels to the left or right
// width=18 x height=8
const uint8_t PlayerShip0[] = {
 0x42, 0x4D, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00,
 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA,
 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small, fast bonus enemy that occasionally speeds across the top of the screen after enough enemies have been killed to make room for it
// includes two blacked out columns on the left and right sides of the image to prevent smearing when moved 2 pixels to the left or right
// width=20 x height=7
const uint8_t SmallEnemyBonus0[] = {
 0x42, 0x4D, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x0F, 0xF0, 0x0F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0xFF, 0x0F, 0xF0,
 0xFF, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small shield floating in space to cover the player's ship from enemy fire (undamaged)
// width=18 x height=5
const uint8_t Bunker0[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0x00,
 0x00, 0x00, 0xAA, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
 0xAA, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small shield floating in space to cover the player's ship from enemy fire (moderate generic damage)
// width=18 x height=5
const uint8_t Bunker1[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xAA, 0x00,
 0x00, 0x00, 0xAA, 0xAA, 0xA0, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA, 0xA0, 0xAA, 0xAA, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0x0A, 0xA0, 0xA0, 0xAA,
 0xAA, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xA0, 0x00, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0xFF};

// small shield floating in space to cover the player's ship from enemy fire (heavy generic damage)
// width=18 x height=5
const uint8_t Bunker2[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x0A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xAA, 0x00,
 0x00, 0x00, 0xAA, 0x0A, 0xA0, 0x00, 0x00, 0x00, 0x0A, 0xAA, 0x0A, 0x00, 0x00, 0x00, 0x0A, 0x0A, 0x0A, 0xA0, 0xAA, 0xA0, 0xA0, 0xA0, 0xA0, 0x00, 0x00, 0x00, 0x00, 0xAA, 0x0A, 0x00, 0xA0, 0xA0,
 0xA0, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space used to cover a bunker that is destroyed
// width=18 x height=5
const uint8_t Bunker3[] = {
 0x42, 0x4D, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0xC4, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// large explosion that can be used upon the demise of the player's ship (first frame)
// width=18 x height=8
const uint8_t BigExplosion0[] = {
 0x42, 0x4D, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x0A, 0x00, 0x09, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x90, 0x00, 0x90, 0xB0, 0x0A, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0xA0, 0x00, 0xE0, 0x00, 0x00,
 0x90, 0x90, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00,
 0x00, 0xE0, 0x0A, 0x0A, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x09, 0x00, 0x00, 0x00, 0x90, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFF};

// large explosion that can be used upon the demise of the player's ship (second frame)
// width=18 x height=8
const uint8_t BigExplosion1[] = {
 0x42, 0x4D, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x0E, 0x00, 0x09, 0x00, 0x09, 0x00, 0xB0, 0x00, 0xA0, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA9, 0x00, 0x00, 0x00, 0x00, 0x90,
 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0A, 0x00, 0x90, 0x00, 0xB0, 0x00, 0x09, 0x00, 0x00, 0x00, 0xFF};

// small explosion best used for the demise of an enemy
// width=16 x height=10
const uint8_t SmallExplosion0[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0,
 0x0F, 0x00, 0x0F, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0xF0, 0xF0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00,
 0xF0, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0xF0, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space following the small explosion for the demise of an enemy
// width=16 x height=10
const uint8_t SmallExplosion1[] = {
 0x42, 0x4D, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// a missile in flight
// includes one blacked out row on the top, bottom, and right of the image to prevent smearing when moved 1 pixel down, up, or left
// width=4 x height=9
const uint8_t Missile0[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00,
 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// a missile in flight
// includes one blacked out row on the top, bottom, and left of the image to prevent smearing when moved 1 pixel down, up, or right
// width=4 x height=9
const uint8_t Missile1[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F,
 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space to cover a missile after it hits something
// width=4 x height=9
const uint8_t Missile2[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// a laser burst in flight
// includes one blacked out row on the top and bottom of the image to prevent smearing when moved 1 pixel up or down
// width=2 x height=9
const uint8_t Laser0[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xBB, 0x00,
 0x00, 0x00, 0xAA, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// blank space to cover a laser after it hits something
// width=2 x height=9
const uint8_t Laser1[] = {
 0x42, 0x4D, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x00, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF,
 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF};

// *************************** Capture image dimensions out of BMP**********
#define BUNKERW     ((uint8_t)Bunker0[18])
#define BUNKERH     ((uint8_t)Bunker0[22])
#define ENEMY30W    ((uint8_t)SmallEnemy30PointA[18])
#define ENEMY30H    ((uint8_t)SmallEnemy30PointA[22])
#define ENEMY20W    ((uint8_t)SmallEnemy20PointA[18])
#define ENEMY20H    ((uint8_t)SmallEnemy20PointA[22])
#define ENEMY10W    ((uint8_t)SmallEnemy10PointA[18])
#define ENEMY10H    ((uint8_t)SmallEnemy10PointA[22])
#define ENEMYBONUSW ((uint8_t)SmallEnemyBonus0[18])
#define ENEMYBONUSH ((uint8_t)SmallEnemyBonus0[22])
#define LASERW      ((uint8_t)Laser0[18])
#define LASERH      ((uint8_t)Laser0[22])
#define MISSILEW    ((uint8_t)Missile0[18])
#define MISSILEH    ((uint8_t)Missile0[22])
#define PLAYERW     ((uint8_t)PlayerShip0[18])
#define PLAYERH     ((uint8_t)PlayerShip0[22])
//position of player controlled sprite 
uint32_t spaceship_point; 
uint32_t button; 
int32_t delay_handler; 
int8_t spaceship_health = 1; 
//void GPIOPortF_Handler(void){ 
//	delay_handler = 0x11111111; 
//	delay_handler = 0x22222222;
//	GPIO_PORTF_ICR_R = 0x10; 
//	Move_Missile(); 
//	Draw_Missile(); 
//} 
//creating enemy's 
struct State{
	unsigned long x_H; //x coordinate
	unsigned long y_H; //y coordinate 
	const unsigned char *image; //ptr->image 
	int life; //0=dead, 1=alive 
}; 
//creating an enemy count  
int num_enemies = 3; 
int level_enemies;
typedef struct State STyp; 
STyp Enemy[3]; 
void Init(void){
		Enemy[0].x_H =10; 
		Enemy[0].y_H =10; 
		Enemy[0].image = SmallEnemy30PointA; 
		Enemy[0].life = 2; 
		Enemy[1].x_H =30; 
		Enemy[1].y_H =10; 
		Enemy[1].image = SmallEnemy30PointA; 
		Enemy[1].life = 2; 
		Enemy[2].x_H =50; 
		Enemy[2].y_H =10; 
		Enemy[2].image = SmallEnemy30PointA; 
		Enemy[2].life = 2; 	
}
STyp Enemy_2[5]; 
void Init_2 (void){
		Enemy_2[0].x_H =10; 
		Enemy_2[0].y_H =10; 
		Enemy_2[0].image = SmallEnemy10PointA; 
		Enemy_2[0].life = 2; 
		Enemy_2[1].x_H =30; 
		Enemy_2[1].y_H =10; 
		Enemy_2[1].image = SmallEnemy10PointB; 
		Enemy_2[1].life = 2; 
		Enemy_2[2].x_H =50; 
		Enemy_2[2].y_H =10; 
		Enemy_2[2].image = SmallEnemy10PointA; 
		Enemy_2[2].life = 2; 
		Enemy_2[3].x_H = 20; 
		Enemy_2[3].y_H = 20; 
		Enemy_2[3].image = SmallEnemy20PointB; 
		Enemy_2[3].life = 1; 
		Enemy_2[4].x_H = 40; 
		Enemy_2[4].y_H = 20; 
		Enemy_2[4].image = SmallEnemy20PointA; 
		Enemy_2[4].life = 1;
} 	
STyp Enemy_3[1]; 
int random_movement_counter; 
void Init_3(void){
	Enemy_3[0].x_H = 15;
	Enemy_3[0].y_H = 15; 
	Enemy_3[0].image = SmallEnemyBonus0; 
	Enemy_3[0].life = 1; 
	Init_Missile_3(); 
	Alien_Missile_Init_3(); 
	random_movement_counter = Random()>>24; 
	random_movement_counter = (random_movement_counter%5)+1; 
} 
	//Nokia5110_ClearBuffer(); 
int level; 
int main(void){
  TExaS_Init(SSI0_Real_Nokia5110_Scope);  // set system clock to 80 MHz
  Random_Init(1);
	ADC_Init(); 
  LCD_Init();
	ButtonInit(); 
	LCD_ClearBuffer();
	Init(); 
	Sound_Init(); 
	Init_Missile(); 
	Alien_Missile_Init(); 
	spaceship_point = ADC_In(); 
	spaceship_point = spaceship_point/62; 
	Draw_2();
	uint8_t alien_count = 0; 
	Random_Init(NVIC_ST_CURRENT_R); 
	//EnableInterrupts(); 
	level_enemies = 3;
	LCD_Clear(); 
		LCD_Goto(1, 1); 
		LCD_OutString("  SPACE "); 
		LCD_Goto(1, 2); 
		LCD_OutString("INVADERS!"); 
		LCD_Goto(1, 3); 
		LCD_OutDec(1234); 
	Delay100ms(100);
	
	LCD_Clear(); 
		LCD_Goto(1, 1); 
		LCD_OutString("3"); 
		LCD_Goto(2,4); 
		LCD_OutDec(1234); 
	Delay100ms(20);
	
	LCD_Clear(); 
		LCD_Goto(1, 1); 
		LCD_OutString("3...2"); 
		LCD_Goto(2,4); 
		LCD_OutDec(1234);
	Delay100ms(20);
	
	LCD_Clear(); 
		LCD_Goto(1, 1); 
		LCD_OutString("3...2...1"); 
		LCD_Goto(2,4); 
		LCD_OutDec(1234); 
	Delay100ms(100);
EnableInterrupts(); 
level = 1; 
while (spaceship_health == 1 && num_enemies >0) {
	//constantly move the spaceship with 60fps delay 
	Move_SpaceShip(); 
	Draw_2(); 
	//check missile speed and delay on hardware
	//Move Missile and maybe a seperate draw will need to be interrupt based
	if (alien_count % 3 == 0){ 
		Move_Missile(); 
	}
	//Draw_Missile(); 
	//this might be an interrupt 
	Missile_Alien_Check();
	if(alien_count%50 == 0){
		Move_Alien_Missile(); 
		//call 
	}
	//Draw_Alien_Missile(); 
	//only draw aliens accroding to desired speed/timer 
	//level 1 needs to have a bigger number than 4
	if (alien_count%40 == 0){
		//alien_count++; 
		Move_Aliens();
	}
	//this needs to be random and/or slower 
	if (alien_count%60 == 0){
		Alien_Fire(); 
		//alien_count++; 
	} 
	alien_count++; 
	Delay100ms(1); 
	
}
while(spaceship_health == 0){
		LCD_Clear();
		LCD_Goto(1, 1);
		LCD_OutString("GAME OVER");
		LCD_Goto(1, 2);
		LCD_OutString("Nice try,");
		LCD_Goto(1, 3);
		LCD_OutString("Earthling!");
		LCD_Goto(2, 4);
		LCD_OutDec(1234);
	}
	DisableInterrupts(); 
	Init_2(); 
	LCD_Clear(); 
	LCD_Goto(1, 1); 
	LCD_OutString("LEVEL 2"); 
	LCD_Goto(1, 2); 
	LCD_OutDec(1234); 
	Delay100ms(50); 
	Init_Missile_2(); 
	Alien_Missile_Init_2(); 
	ButtonInit(); 
	num_enemies = 5; 
	level_enemies = 5; 
	spaceship_point = ADC_In(); 
	spaceship_point = spaceship_point/62; 
	level = 2; 	
	EnableInterrupts(); 

while (spaceship_health == 1 && num_enemies >0) {
	Move_SpaceShip(); 
	Draw_3(); 
	if (alien_count % 3 == 0){ 
		Move_Missile_2(); 
	} 
	Missile_Alien_Check_2();
	if(alien_count%15 == 0){
		Move_Alien_Missile_2(); 
	} 
	if (alien_count%20 == 0){
	Move_Alien_2(); 
		} 
	if (alien_count%40 == 0){
		Alien_Fire_2(); 
		} 
	alien_count++; 
	Delay100ms(1); 
} 
while(spaceship_health == 0){
		LCD_Clear();
		LCD_Goto(1, 1);
		LCD_OutString("GAME OVER");
		LCD_Goto(1, 2);
		LCD_OutString("Nice try,");
		LCD_Goto(1, 3);
		LCD_OutString("Earthling!");
		LCD_Goto(2, 4);
		LCD_OutDec(1234);
	}
	DisableInterrupts(); 
		Init_3(); 
		LCD_Clear(); 
		LCD_Goto(1, 1); 
		LCD_OutString("FINAL LEVEL"); 
		LCD_Goto(1, 2); 
		LCD_OutDec(1234); 
		Delay100ms(30);  
		ButtonInit(); 
		level_enemies = 1; 
		spaceship_point = ADC_In(); 
		spaceship_point = spaceship_point/62; 
		level = 3; 	
		num_enemies = 1; 
	EnableInterrupts();
while (spaceship_health > 0 && num_enemies > 0){
	Move_SpaceShip(); 
	Draw_4(); 
	Missile_Alien_Check_3(); 
	if (alien_count % 3 == 0){
	Move_Missile_3(); 
	} 
	if (alien_count % 15 == 0){
		Move_Alien_Missile_3(); 
	} 
	if (alien_count % 400 == 0){
		Alien_Fire_3(); 
	} 
	if (alien_count % 30 == 0){
		Move_Alien_3(); 
	} 
	alien_count++; 
	Delay100ms(1); 
} 

	while(num_enemies <= 0){
		LCD_Clear(); 
		LCD_Goto(1, 1); 
		LCD_OutString("YOU WIN"); 
		LCD_Goto(1, 2); 
		LCD_OutString("Good job,"); 
		LCD_Goto(1, 3); 
		LCD_OutString("Defender!"); 
		LCD_Goto(2,4); 
		LCD_OutDec(1234); 
		
	} 
	while(spaceship_health == 0){
		LCD_Clear();
		LCD_Goto(1, 1);
		LCD_OutString("GAME OVER");
		LCD_Goto(1, 2);
		LCD_OutString("Nice try,");
		LCD_Goto(1, 3);
		LCD_OutString("Earthling!");
		LCD_Goto(2, 4);
		LCD_OutDec(1234);
	}
}
//find 60fps delay 
void Delay100ms(uint32_t count){uint32_t volatile time;
  while(count>0){
    time = 727240/10;  // prettier delay 
    while(time){
	  	time--;
    }
    count--;
  }
}
void Move_Aliens(void){
	//going to need a different move and sound for each level
	int i; 
	static int dance = 1; 
	//"dancing" aliens
	//i = number of inital aliens 
	for (i=0;i<level_enemies;i++){
	if (dance%2 != 0){
		Enemy[i].image=SmallEnemy30PointB;
	}
	else{
		Enemy[i].image=SmallEnemy30PointA; 
	} 
}
	dance++; 
	//making aliens move n place right, q places down, n places left
	//some values make the aliens kill themselves 
	static int direction_count = 0; 
	if (direction_count < 5){
	
		for(i=0;i<level_enemies;i++){
			Enemy[i].x_H +=2;
		}
	}
	else if(direction_count < 6 ){
		for(i=0;i<level_enemies;i++){
			Enemy[i].y_H += 4; 
			Sound_Fastinvader1(); 
		}	
	}
	else{
		for(i=0;i<level_enemies;i++){
			Enemy[i].x_H -= 2; 
		}
	}
	//counts number of shifts with max shift at 21 for the pattern 
	direction_count= (direction_count+1)%11; 
}	
int explosion_count = 0;
void Draw_2(void){
	int i;  
	//drawing all the BMP 
	LCD_ClearBuffer(); 
	//prints any living aliens 
	for (i=0; i<level_enemies;i++){
		if(Enemy[i].life > 0){
			LCD_PrintBMP(Enemy[i].x_H,
			Enemy[i].y_H, Enemy[i].image,0); 
		}
		if(Enemy[i].life == -1){
			Enemy[i].image = SmallExplosion0; 
			LCD_PrintBMP(Enemy[i].x_H,
			Enemy[i].y_H, Enemy[i].image,0);
			explosion_count++; 
			if(explosion_count%10 == 0){
				Enemy[i].life = 0;
				Sound_Explosion();
			}
		} 
		if(Enemy[i].life == 0){
			Enemy[i].life = -11; 
			--num_enemies; 			
		}
	} 
	Draw_Alien_Missile(); 
	Draw_Missile(); 
	//checks how many aliends are alive 
	LCD_PrintBMP(spaceship_point, 47, PlayerShip0,0);
	LCD_DisplayBuffer(); 
	
}
//spaceship follows ADC
void Move_SpaceShip (void){
	spaceship_point = ADC_In(); 
	spaceship_point = spaceship_point/62; 
	
}
//make a structure for missiles 
//one element for if button got pushed 
//one element for x_location 
//one element for y_location   
//default the locations to (0,80) 
struct Missile_State{
	unsigned long x_M; 
	signed long y_M; 
	const unsigned char *image_M; 
	long fire; //was button pressed 
}; 
typedef struct Missile_State Missile_StateTyp; 
Missile_StateTyp Ammo[20]; 
Missile_StateTyp Ammo_2[20];
Missile_StateTyp Ammo_3[20]; 
//index for Ammo structure 
int8_t ammo_counter = 0; 
int8_t ammo_counter_2 = 0;
int8_t ammo_counter_3 = 0; 
//holds value of buttons 
int8_t shot; 

//enemy ammo 
struct Enemy_Ammo_State{ 
	//x_location 
	unsigned long x; 
	//y_location 
	signed long y; 
	//missile sprite
	const unsigned char *image; 
	//did it fire(1) or not(0)  
	long fire; 
	//which enemy is firing 
	//decide by random number generator 
	long enemy_number; 
}; 
typedef struct Enemy_Ammo_State Enemy_Ammo_StateTyp; 
Enemy_Ammo_StateTyp Enemy_Missile[20];
Enemy_Ammo_StateTyp Enemy_Missile_2[20]; 
Enemy_Ammo_StateTyp Enemy_Missile_3 [20]; 
int8_t enemy_missile_counter = 0; 
int8_t enemy_shot; 
void Alien_Missile_Init(void){
	int i; 
	for (i=0;i<20; i++){
		Enemy_Missile[i].x = 0; 
		Enemy_Missile[i].y = 0; 
		Enemy_Missile[i].image = Missile0; 
		Enemy_Missile[i].fire = 0; 
		Enemy_Missile[i].enemy_number = 8; 
	} 
} 
void Alien_Missile_Init_2(void){
	int i; 
	for (i=0;i<20; i++){
		Enemy_Missile_2[i].x = 0; 
		Enemy_Missile_2[i].y = 0; 
		Enemy_Missile_2[i].image = Missile0; 
		Enemy_Missile_2[i].fire = 0; 
		Enemy_Missile_2[i].enemy_number = 8; 
	} 
} 
void Alien_Missile_Init_3(void){
	int i; 	
	for (i=0;i<20; i++){
		Enemy_Missile_3[i].x = 0; 
		Enemy_Missile_3[i].y = 0; 
		Enemy_Missile_3[i].image = Missile0; 
		Enemy_Missile_3[i].fire = 0; 
		Enemy_Missile_3[i].enemy_number = 0; 
	} 
} 
int enemy_chosen = 0;
void Alien_Fire(){
	//& = number of enemies for the level  
	enemy_chosen = Random()&0x03;
	//random choses which enemy that fires 
	if(Enemy[enemy_chosen].life > 0){
		//initailize starting postions (needs offest to make missiles look normal) 
		Enemy_Missile[enemy_missile_counter].y = Enemy[enemy_chosen].y_H + 10; 
		Enemy_Missile[enemy_missile_counter].x = Enemy[enemy_chosen].x_H + 7; 
		Enemy_Missile[enemy_missile_counter].fire = 1; 
		enemy_missile_counter++;
		Sound_Shoot();
	} 
	if (enemy_missile_counter > 19){
		enemy_missile_counter = 0; 
	} 
} 
void Alien_Fire_3(void){
		Enemy_Missile_3[enemy_missile_counter].y = Enemy_3[0].y_H + 10; 
		Enemy_Missile_3[enemy_missile_counter].x = Enemy_3[0].x_H + 7; 
		Enemy_Missile_3[enemy_missile_counter].fire = 1; 
		enemy_missile_counter++;
		Sound_Shoot();
	if (enemy_missile_counter > 19){
		enemy_missile_counter = 0; 
	} 
}  
void Move_Alien_Missile (void){
	
	int i; 
	for (i=0;i<20;i++){
			//beginning fire sequence after button is pressed 
			if (Enemy_Missile[i].fire == 1){ 
				//2 is for button was pressed and missile is launching 
				Enemy_Missile[i].fire = 2; 
			} 
			//makes the launch missile keep going 
			if (Enemy_Missile[i].fire == 2){
				//may also need a specail cases when too close to the bottom 
				//if missile hits the top, reset the data to starting postion 
				if (Enemy_Missile[i].y > 47){
					Enemy_Missile[i].fire = 0; 
					Enemy_Missile[i].y = 0; 
					Enemy_Missile[i].x = 0; 
				} 
				//other wise, go up the screen by 2 pixels 
				else{ 
				Enemy_Missile[i].y +=2; 
				} 	
			} 
		} 
	
} 


void Draw_Alien_Missile(void){
	int i; 
	for (i=0;i<20; i++){
		if(Enemy_Missile[i].fire > 0){
			LCD_PrintBMP(Enemy_Missile[i].x,
			Enemy_Missile[i].y, Enemy_Missile[i].image, 0); 
		} 
	} 
} 
 void Draw_Alien_Missile_2(void){ 
	int i; 
	for (i=0;i<20; i++){
		if(Enemy_Missile_2[i].fire > 0){
			LCD_PrintBMP(Enemy_Missile_2[i].x,
			Enemy_Missile_2[i].y, Enemy_Missile_2[i].image, 0); 
		} 
	} 
} 
 void Draw_Alien_Missile_3(void){
	 int i; 
	for (i=0;i<20; i++){
		if(Enemy_Missile_3[i].fire > 0){
			LCD_PrintBMP(Enemy_Missile_3[i].x,
			Enemy_Missile_3[i].y, Enemy_Missile_3[i].image, 0); 
		} 
	} 
 } 
void Init_Missile (void){
	int i; 
	for(i=0; i<20; i++){
		ammo_counter = 0; 
		Ammo[i].x_M = 0; 
		Ammo[i].y_M = 80; 
		Ammo[i].image_M = Missile0; 
		Ammo[i].fire = 0; 
	} 
} 
void Init_Missile_3 (void){
	int i; 
	for (i=0; i<20; i++){
		ammo_counter_3 = 0; 
		Ammo_3[i].x_M = 0; 
		Ammo_3[i].y_M = 0; 
		Ammo_3[i].image_M = Missile0; 
		Ammo_3[i].fire = 0; 
	} 
} 
void Move_Missile(void){
	if(ammo_counter > 19){
		ammo_counter = 0;
	} 
	else{
		ammo_counter++; 
	} 
	int i; 
		for (i=0;i<20;i++){
			//beginning fire sequence after button is pressed 
			if (Ammo[i].fire == 1){ 
				Ammo[i].x_M = spaceship_point+8; 
				Ammo[i].y_M = 78;
				//2 is for button was pressed and missile is launching 
				Ammo[i].fire = 2; 
			} 
			//makes the launch missile keep going 
			if (Ammo[i].fire == 2){
				//if missile hits the top, reset the data to starting postion 
				if (Ammo[i].y_M < 0){
					Ammo[i].fire = 0; 
					Ammo[i].y_M = 80; 
					Ammo[i].x_M = 0; 
				} 
				//other wise, go up the screen by 2 pixels 
				else{ 
				Ammo[i].y_M -=2; 
				} 	
			} 
		} 
	//for each location in structure, increment y_location by 4
	//only if button was pressed 
	//call ADC and puts value into 
	//resets locations to (not pressed, 0, 80) once y_location = 0
} 
void Move_Missile_3 (void){
	if(ammo_counter > 19){
			ammo_counter = 0;
		} 
		else{
			ammo_counter++; 
		} 
		int i; 
			for (i=0;i<20;i++){
				//beginning fire sequence after button is pressed 
				if (Ammo_3[i].fire == 1){ 
					Ammo_3[i].x_M = spaceship_point+8; 
					Ammo_3[i].y_M = 78;
					//2 is for button was pressed and missile is launching 
					Ammo_3[i].fire = 2; 
				} 
				//makes the launch missile keep going 
				if (Ammo_3[i].fire == 2){
					//if missile hits the top, reset the data to starting postion 
					if (Ammo_3[i].y_M < 0){
						Ammo_3[i].fire = 0; 
						Ammo_3[i].y_M = 80; 
						Ammo_3[i].x_M = 0; 
					} 
					//other wise, go up the screen by 2 pixels 
					else{ 
					Ammo_3[i].y_M -=2; 
					} 	
				} 
			} 
	} 

void Draw_Missile(void){
	int i; 
	for (i=0;i<20; i++){
		if(Ammo[i].fire > 0){
			LCD_PrintBMP(Ammo[i].x_M,
			Ammo[i].y_M, Ammo[i].image_M, 0); 
		} 
	} 
	//LCD_DisplayBuffer(); 
	//checks if condition if true, 
	//true, then output the missile via LDC_PrintBMP(1,2,3,4)
} 
int s_left; 
int s_right; 

void Missile_Alien_Check(){
	//sets alien life = 0 when pixels are matching 
	//i = alien index
	int i;
	//j = missile index 
	int j; 
	//farthest left it could hit 
	int x_left; 
	//farthest rignt it could hit
	int x_right; 
	//height that needs to be hit 
	int y; 
	//spaceship's location's
	//int s_left; 
	s_left = ADC_In(); 
	s_left = s_left/62; 
	//might not be correct 
	//int s_right; 
	s_right	= s_left + 10; 
	int s_y = 46; 
	//for each missile check if each alien got hit 
	for (i=0;i<level_enemies;i++){
		if (Enemy[i].life > 0){
				x_left = Enemy[i].x_H; 
				x_right = 12+x_left; 
				y = Enemy[i].y_H; 
			} 
			for(j=0;j<20;j++){
				if (Ammo[j].y_M == y && Ammo[j].x_M >= x_left && Ammo[j].x_M <= x_right){
				//-1 = explosion 
				Enemy[i].life = -1;
				//--num_enemies;
				//break; 				
			} 
		} 
		if(Enemy[i].life == -1){
			break; 
		} 
	} 
	//check each enemy missile hit the spaceship
	for(j=0;j<20;j++){
		if(Enemy_Missile[j].y >= s_y && Enemy_Missile[j].x>= s_left && Enemy_Missile[j].x <= s_right){
			spaceship_health = 0;
		}
	} 
	//check if aliens hit the earth
	for(i=0;i<level_enemies;i++){
		if(Enemy[i].y_H >= 48){
			spaceship_health = 0; 
			break; 
		} 
	} 
} 
void Missile_Alien_Check_3 (void){ 
	//sets alien life = 0 when pixels are matching 
	//i = alien index
	int i;
	//j = missile index 
	int j; 
	//farthest left it could hit 
	int x_left; 
	//farthest rignt it could hit
	int x_right; 
	//height that needs to be hit 
	int y_1; 
	int y_2; 
	//spaceship's location's
	//int s_left; 
	s_left = ADC_In(); 
	s_left = s_left/62; 
	//might not be correct 
	//int s_right; 
	s_right	= s_left + 14; 
	int s_y = 46; 
	//for each missile check if each alien got hit 
	for (i=0;i<level_enemies;i++){
		if (Enemy_3[i].life > 0){
				x_left = Enemy_3[i].x_H; 
				x_right = 12+x_left; 
				y_1 = Enemy_3[i].y_H; 
				y_2 = y_1 - 10; 
			} 
			for(j=0;j<20;j++){
				if (Ammo_3[j].y_M <= y_1 && Ammo_3[j].y_M >= y_2 && Ammo_3[j].x_M >= x_left && Ammo_3[j].x_M <= x_right){
				//-1 = explosion 
				Enemy_3[i].life = -1;
				//--num_enemies;
				//break; 				
			} 
		} 
		if(Enemy_3[i].life == -1){
			break; 
		} 
	} 
	//check each enemy missile hit the spaceship
	for(j=0;j<20;j++){
		if(Enemy_Missile_3[j].y >= s_y && Enemy_Missile_3[j].x>= s_left && Enemy_Missile_3[j].x <= s_right){
			spaceship_health = 0;
		}
	} 
	//check if aliens hit the earth
	for(i=0;i<level_enemies;i++){
		if(Enemy_3[i].y_H >= 48){
			spaceship_health = 0; 
			break; 
		} 
	} 
} 
//Hardware Trigger Interrupt 
void GPIOPortC_Handler(void){ 
	GPIO_PORTC_ICR_R = 0x10; 
	if(level == 1){ 
		Ammo[ammo_counter].fire = 1; 
		Move_Missile(); 
		Draw_Missile(); 
		} 
	if(level == 2){ 
		Ammo_2[ammo_counter_2].fire = 1; 
		Move_Missile_2(); 
		Draw_Missile_2(); 
		ammo_counter_2++;
	} 
	if(level == 3){
		Ammo_3[ammo_counter].fire = 1; 
		Move_Missile_3(); 
		Draw_Missile_3(); 
	} 
	Sound_Shoot(); 
	//add a light? 
} 
void Draw_4 (void){
	LCD_ClearBuffer(); 
	int i; 
	//prints any living aliens 
	for (i=0; i<level_enemies;i++){
		if(Enemy_3[i].life > 0){
			LCD_PrintBMP(Enemy_3[i].x_H,
			Enemy_3[i].y_H, Enemy_3[i].image,0); 
		}
		if(Enemy_3[i].life == -1){
			Enemy_3[i].image = BigExplosion0; 
			LCD_PrintBMP(Enemy_3[i].x_H,
			Enemy_3[i].y_H, Enemy_3[i].image,0);
			explosion_count++; 
			if(explosion_count%10 == 0){
				Enemy_3[i].life = 0;
				Sound_Explosion();
			}
		} 
		if(Enemy_3[i].life == 0){
			Enemy_3[i].life = -11; 
			--num_enemies; 			
		}
	} 
	Draw_Missile_3(); 
	Draw_Alien_Missile_3(); 
	LCD_PrintBMP(spaceship_point, 47, PlayerShip0,0);
	LCD_DisplayBuffer(); 
} 	

void Draw_3(void){
	LCD_ClearBuffer(); 
	int i; 
	//prints any living aliens 
	for (i=0; i<level_enemies;i++){
		if(Enemy_2[i].life > 0){
			LCD_PrintBMP(Enemy_2[i].x_H,
			Enemy_2[i].y_H, Enemy_2[i].image,0); 
		}
		if(Enemy_2[i].life == -1){
			Enemy_2[i].image = SmallExplosion0; 
			LCD_PrintBMP(Enemy_2[i].x_H,
			Enemy_2[i].y_H, Enemy_2[i].image,0);
			explosion_count++; 
			if(explosion_count%10 == 0){
				Enemy_2[i].life = 0;
				Sound_Explosion();
			}
		} 
		if(Enemy_2[i].life == 0){
			Enemy_2[i].life = -11; 
			--num_enemies; 			
		}
	} 
	if(level == 1){ 
	Draw_Alien_Missile(); 
	Draw_Missile(); 
	} 
	else{
		Draw_Missile_2(); 
		Draw_Alien_Missile_2(); 
	} 
	LCD_PrintBMP(spaceship_point, 47, PlayerShip0,0);
	LCD_DisplayBuffer(); 
} 	
	int x_left; 
	//farthest rignt it could hit
	int x_right; 
void Missile_Alien_Check_2(void){
//sets alien life = 0 when pixels are matching 
	//i = alien index
	int i;
	//j = missile index 
	int j; 
	//farthest left it could hit 

	//height that needs to be hit 
	int y_1;
	int y_2; 
	//spaceship's location's
	//int s_left; 
	s_left = ADC_In(); 
	s_left = s_left/62; 
	s_left = s_left+ 2;
	//might not be correct 
	//int s_right; 
	s_right	= s_left + 8; 
	int s_y = 46; 
	//for each missile check if each alien got hit 
	for (i=0;i<level_enemies;i++){
		if (Enemy_2[i].life > 0){
				x_left = Enemy_2[i].x_H; 
				x_right = 12+x_left; 
				y_1 = Enemy_2[i].y_H; 
				y_2 = y_1 - 10; 
			} 
			for(j=0;j<20;j++){
				if (Ammo_2[j].y_M <= y_1 &&  Ammo_2[j].y_M >= y_2 && Ammo_2[j].x_M >= x_left && Ammo_2[j].x_M <= x_right){
				//-1 = explosion 
				Enemy_2[i].life = -1;
				Sound_Killed(); 
				//--num_enemies;
				//break; 				
			} 
		} 
		if(Enemy_2[i].life == -1){
			break; 
		} 
	} 
	//check each enemy missile hit the spaceship
	for(j=0;j<20;j++){
		if(Enemy_Missile_2[j].y >= s_y && Enemy_Missile_2[j].x>= s_left && Enemy_Missile_2[j].x <= s_right){
			spaceship_health = 0;
			Sound_Highpitch(); 
		}
	} 
	//check if aliens hit the earth
	for(i=0;i<level_enemies;i++){
		if(Enemy_2[i].y_H >= 48){
			spaceship_health = 0;
			Sound_Highpitch(); 
			break; 
		} 
	} 
} 
void Draw_Missile_2 (void){
	int i; 
	for (i=0;i<20; i++){
		if(Ammo_2[i].fire > 0){
			LCD_PrintBMP(Ammo_2[i].x_M,
			Ammo_2[i].y_M, Ammo_2[i].image_M, 0); 
		} 
	} 
}
void Draw_Missile_3(void){
	int i; 
	for (i=0;i<20; i++){
		if(Ammo_3[i].fire > 0){
			LCD_PrintBMP(Ammo_3[i].x_M, Ammo_3[i].y_M,
			Ammo_3[i].image_M, 0);
		}
	}
} 
void Init_Missile_2(void){
	int i; 
	for(i=0; i<20; i++){
		ammo_counter_2 = 0; 
		Ammo_2[i].x_M = 0; 
		Ammo_2[i].y_M = 80; 
		Ammo_2[i].image_M = Missile0; 
		Ammo_2[i].fire = 0; 
	} 
} 
void Move_Missile_2(void){
if(ammo_counter_2 > 19){
		ammo_counter_2 = 0;
	} 
//	else{
//		ammo_counter_2++; 
//	} 
	int i; 
		for (i=0;i<20;i++){
			//beginning fire sequence after button is pressed 
			if (Ammo_2[i].fire == 1){ 
				Ammo_2[i].x_M = spaceship_point+8; 
				Ammo_2[i].y_M = 78;
				//2 is for button was pressed and missile is launching 
				Ammo_2[i].fire = 2; 
			} 
			//makes the launch missile keep going 
			if (Ammo_2[i].fire == 2){
				//if missile hits the top, reset the data to starting postion 
				if (Ammo_2[i].y_M < 0){
					Ammo_2[i].fire = 0; 
					Ammo_2[i].y_M = 80; 
					Ammo_2[i].x_M = 0; 
				} 
				//other wise, go up the screen by 2 pixels 
				else{ 
				Ammo_2[i].y_M -=2; 
				} 	
			} 
		} 
	}
void Alien_Fire_2 (void){
	enemy_chosen = Random()%5;
	//random choses which enemy that fires 
	if(Enemy_2[enemy_chosen].life > 0){
		//initailize starting postions (needs offest to make missiles look normal) 
		Enemy_Missile_2[enemy_missile_counter].y = Enemy_2[enemy_chosen].y_H + 10; 
		Enemy_Missile_2[enemy_missile_counter].x = Enemy_2[enemy_chosen].x_H + 7; 
		Enemy_Missile_2[enemy_missile_counter].fire = 1; 
		enemy_missile_counter++;
		Sound_Shoot();
	} 
	if (enemy_missile_counter > 19){
		enemy_missile_counter = 0; 
	} 
}	
 
 void Move_Alien_Missile_2 (void){
	
	int i; 
	for (i=0;i<20;i++){
			//beginning fire sequence after button is pressed 
			if (Enemy_Missile_2[i].fire == 1){ 
				//2 is for button was pressed and missile is launching 
				Enemy_Missile_2[i].fire = 2; 
			} 
			//makes the launch missile keep going 
			if (Enemy_Missile_2[i].fire == 2){
				//may also need a specail cases when too close to the bottom 
				//if missile hits the top, reset the data to starting postion 
				if (Enemy_Missile_2[i].y > 47){
					Enemy_Missile_2[i].fire = 0; 
					Enemy_Missile_2[i].y = 0; 
					Enemy_Missile_2[i].x = 0; 
				} 
				//other wise, go up the screen by 2 pixels 
				else{ 
				Enemy_Missile_2[i].y +=2; 
				} 	
			} 
		} 
	
} 
 void Move_Alien_Missile_3 (void){
	 		int i; 
	for (i=0;i<20;i++){
			//beginning fire sequence after button is pressed 
			if (Enemy_Missile_3[i].fire == 1){ 
				//2 is for button was pressed and missile is launching 
				Enemy_Missile_3[i].fire = 2; 
			} 
			//makes the launch missile keep going 
			if (Enemy_Missile_3[i].fire == 2){
				//may also need a specail cases when too close to the bottom 
				//if missile hits the top, reset the data to starting postion 
				if (Enemy_Missile_3[i].y > 47){
					Enemy_Missile_3[i].fire = 0; 
					Enemy_Missile_3[i].y = 0; 
					Enemy_Missile_3[i].x = 0; 
				} 
				//other wise, go up the screen by 2 pixels 
				else{ 
				Enemy_Missile_3[i].y +=2; 
				} 	
			} 
	 
 } 
}
void Move_Alien_2 (void){
	static int dance = 1; 
	static int direction_count = 0;
	int i; 
	if(dance%2 != 0){
		Enemy_2[0].image = SmallEnemy10PointB; 
		Enemy_2[1].image = SmallEnemy10PointA; 
		Enemy_2[2].image = SmallEnemy10PointB; 
		Enemy_2[3].image = SmallEnemy20PointA; 
		Enemy_2[4].image = SmallEnemy20PointB; 
	} 
	else{	
		Enemy_2[0].image = SmallEnemy10PointA; 
		Enemy_2[1].image = SmallEnemy10PointB; 
		Enemy_2[2].image = SmallEnemy10PointA; 
		Enemy_2[3].image = SmallEnemy20PointB; 
		Enemy_2[4].image = SmallEnemy20PointA; 
	} 
	dance++; 
	if(direction_count < 2){
		for(i=0;i<level_enemies;i++){
			Enemy_2[i].x_H += 2;
			Sound_Fastinvader1(); 
		}
	}
	else if (direction_count < 4){
		for(i=0;i<level_enemies;i++){
			Enemy_2[i].y_H += 3; 
			Sound_Fastinvader2(); 
		} 
	}
	else if (direction_count < 6){
		for(i=0; i<level_enemies;i++){
			Enemy_2[i].x_H -= 2; 
			Sound_Fastinvader3(); 
		} 
	}
	else if (direction_count < 7){
		for(i=0; i<level_enemies;i++){
			Enemy_2[i].y_H -=3; 
			Sound_Fastinvader4(); 
		} 
	}
	direction_count = (direction_count+1)%7; 
} 
void Move_Alien_3 (void){
	int direction; 
	int i; 
	direction = Random()&0x01; 
	for (i=0;i<20;i++){ 
	if (Ammo_3[i].fire > 0){
		if(direction == 1&& Enemy_3[0].x_H > 10){
			Enemy_3[0].x_H -= 10;
			Sound_Highpitch(); 
			break; 
		} 
		if(direction == 0 && Enemy_3[0].x_H < 40){
			Enemy_3[0].x_H += 10; 
			Sound_Highpitch(); 
			break; 
		} 
		if (direction == 0 && Enemy_3[0].x_H >= 40){
			Enemy_3[0].x_H -= 20; 
			Sound_Highpitch(); 
			break; 
		} 
		if (Enemy_3[0].x_H <= 10){
			Enemy_3[0].x_H += 20; 
			Sound_Highpitch(); 
			break; 
		} 
	} 
	} 
	Enemy_3[0].y_H += 1; 
	Sound_Fastinvader2(); 
}
